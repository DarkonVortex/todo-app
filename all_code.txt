

# --- FILE: C:\Users\zrdar\Documents\todo-app\server.js ---


require('dotenv').config()
const express = require('express')
const path = require('path')
const cookieParser = require('cookie-parser')
const connectDB = require('./config/db')
const app = express()
const authRoutes = require('./routes/authRoutes')
const protectedRoutes = require('./routes/protectedRoutes')
const todoRoutes = require('./routes/todoRoutes')

connectDB()
app.use(express.json())
app.use(express.static(path.join(__dirname, 'public')))
app.use(cookieParser())
app.use('/api/auth', authRoutes)
app.use('/api/protected', protectedRoutes)
app.use('/api/todo', todoRoutes)
app.listen(3000, () => {
  console.log('Server running on port 3000')
})


# --- FILE: C:\Users\zrdar\Documents\todo-app\config\db.js ---


const mongoose = require('mongoose')

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGO_URI)
    console.log(`MongoDB connected: ${conn.connection.host}`)
  } catch (err) {
    console.error(`Error: ${err.message}`)
    process.exit(1) // Exit the process if there's an error
  }
}

module.exports = connectDB


# --- FILE: C:\Users\zrdar\Documents\todo-app\controllers\authController.js ---


const bcrypt = require('bcryptjs')
const User = require('../models/User')
const jwt = require('jsonwebtoken')

// Register new user
exports.registerUser = async (req, res) => {
  const { username, email, password } = req.body

  try {
    // Check if user already exists
    const existingUser = await User.findOne({ email })
    if (existingUser) {
      return res.status(400).json({ message: 'User already exists' })
    }

    // Hash pasword before saving
    const salt = await bcrypt.genSalt(10) // Adjust 10 to control hashing complexity
    const hashedPassword = await bcrypt.hash(password, salt)

    // Create new user and save to db
    const newUser = new User({
      username,
      email,
      password: hashedPassword
    })

    await newUser.save()

    // Generate JWT token
    const token = jwt.sign({ userId: newUser._id }, process.env.JWT_SECRET, {
      expiresIn: '24h'
    })

    // Save token in a cookie
    res.cookie('token', token, { httpOnly: true, secure: false })

    // Send token in the response
    res.status(201).json({
      message: 'User registered successfully',
    })
  } catch (error) {
    console.error(error)
    res.status(500).json({ message: 'Server error' })
  }
}

// Login new user
exports.loginUser = async (req, res) => {
  try {
    const { email, password } = req.body
    const user = await User.findOne({ email })
    if (!user) {
      return res.status(400).json({ message: 'User not found' })
    }
    const isMatch = await bcrypt.compare(password, user.password)
    if (!isMatch) {
      return res.status(400).json({ message: 'Credentials incorrect' })
    }
    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {
      expiresIn: '24h'
    })
    res.cookie('token', token, { httpOnly: true, secure: false })
    res.json({ message: 'logged with success', user: { id: user._id, email: user.email, username: user.username } })
  } catch (error) {
    res.status(500).json({ message: 'Server error', error })
  }
}

exports.logoutUser = async (req, res) => {
  try {
    res.clearCookie('token')
    res.json({ message: 'Logged out successfully' })    
  } catch (error) {
    res.status(500).json({ message: 'Server error', error })
  }
}


# --- FILE: C:\Users\zrdar\Documents\todo-app\controllers\todoController.js ---


const Todo = require("../models/Todo");

exports.getTodos = async (req, res) => {
    try {

    } catch (error) {
      res.status(500).json({ message: "Server error", error });
    }
  };

// exports.createTodo = async (req, res) => {
//     try {

//     } catch (error) {
//         res.status(500).json({ message: 'Server error', error })
//     }
// }

// exports.getTodo = async (req, res) => {
//     try {

//     } catch (error) {
//         res.status(500).json({ message: 'Server error', error })
//     }
// }

// exports.updateTodo = async (req, res) => {
//     try {

//     } catch (error) {
//         res.status(500).json({ message: 'Server error', error })
//     }
// }

// exports.deleteTodo = async (req, res) => {
//     try {

//     } catch (error) {
//         res.status(500).json({ message: 'Server error', error })
//     }
// }


# --- FILE: C:\Users\zrdar\Documents\todo-app\controllers\userController.js ---


const User = require("../models/User")

exports.getCurrentUser = async (req, res) => {
    try {
        console.log('hi')
        const user = await User.findById(req.user.userId).select('-password')
        if (!user) {
            return res.status(404).json({ message: 'User not found' })
        }
        res.json(user)
    } catch (error) {
        res.status(500).json({ message: 'Server error', error })
    }
}


# --- FILE: C:\Users\zrdar\Documents\todo-app\middleware\authMiddleware.js ---


const jwt = require('jsonwebtoken')

exports.authMiddleware = (req, res, next) => {

  const token = req.cookies.token

  if (!token) {
    return res.status(401).json({ message: 'No token provided, authorization denied' })
  }

  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET)

    // Add user data to request
    req.user = decoded

    // Move to next middleware
    next()
  } catch (error) {
    console.error('Token verification failed', error)
    res.status(401).json({ message: 'Token is not valid' })
  }
}


# --- FILE: C:\Users\zrdar\Documents\todo-app\models\Todo.js ---


const mongoose = require('mongoose')

const todoSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true
  },
  description: {
    type: String
  },
  completed: {
    type: Boolean,
    default: false
  },
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
})

module.exports = mongoose.model('Todo', todoSchema)


# --- FILE: C:\Users\zrdar\Documents\todo-app\models\User.js ---


const mongoose = require('mongoose')

const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true
  },
  email: {
    type: String,
    required: true,
    unique: true
  },
  password: {
    type: String,
    required: true
  }
})

module.exports = mongoose.model('User', userSchema)


# --- FILE: C:\Users\zrdar\Documents\todo-app\public\js\main.js ---


const ulList = document.getElementById('ulList')
const API_URL_TODO = 'http://192.168.1.135:3000/api/todo/'
import { fetchTodos } from './todo/fetchTodos.js'
import { redirectIfNotLoggedIn, logOut } from './utils.js'

redirectIfNotLoggedIn()

const logOutButton = document.getElementById('logOutButton')

if (logOutButton) {
  logOutButton.addEventListener('click', logOut)
}

fetchTodos(API_URL_TODO)


# --- FILE: C:\Users\zrdar\Documents\todo-app\public\js\utils.js ---


const API_URL_ME = "http://192.168.1.135:3000/api/protected/me";
const API_URL_LOGOUT = "http://192.168.1.135:3000/api/auth/logout";

export async function redirectIfLoggedIn(redirectUrl = "/dashboard.html") {
  try {
    const response = await fetch(API_URL_ME, {
      credentials: "include",
    });

    if (response.ok) {
      window.location.href = redirectUrl;
    } else {
      console.log("response not ok");
    }
  } catch (error) {
    console.log("No authentication, can stay on this page");
  }
}

export async function redirectIfNotLoggedIn(redirectUrl = "/login.html") {
    try {
      const response = await fetch(API_URL_ME, {
        credentials: "include",
      });
  
      if (!response.ok) {
        window.location.href = redirectUrl;
      } else {
        console.log("response ok");
      }
    } catch (error) {
      console.log("No authentication, cannot stay on this page");
    }
  }

export async function logOut() {
  try {
    const response = await fetch(API_URL_LOGOUT, {
      method: "POST",
      credentials: "include",
    });

    const result = await response.json();
    console.log(result);

    window.location.href = "/login.html";
  } catch (error) {
    console.log("No authentication, can stay on this page");
  }
}


# --- FILE: C:\Users\zrdar\Documents\todo-app\public\js\auth\login.js ---


const API_URL = "http://192.168.1.135:3000/api/auth/login";
const loginForm = document.getElementById("loginForm");
const email = document.getElementById("email");
const password = document.getElementById("password");
import { redirectIfLoggedIn } from "../utils.js";

// Redirect user to dashboard if logged in
redirectIfLoggedIn();

loginForm.addEventListener("submit", async (event) => {
  event.preventDefault();
  try {
    let response = await fetch(API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json;charset=utf-8",
      },
      body: JSON.stringify({ email: email.value, password: password.value }),
    });

    const result = await response.json();
    console.log(result);
    redirectIfLoggedIn();
  } catch (error) {
    console.error("Error logging in:", error);
  }
});


# --- FILE: C:\Users\zrdar\Documents\todo-app\public\js\auth\me.js ---


const API_URL = 'http://192.168.1.135:3000/api/protected/me'
const getMe = document.getElementById('getMe')

getMe.addEventListener('submit', async (event) => {
    event.preventDefault()
    try {
        let response = await fetch(API_URL, {
            method: 'GET',
            credentials: 'include'
        })
    
        const result = await response.json();
    
        console.log(result)
    } catch (error) {
        console.error('Error logging in:', error)
    }
})


# --- FILE: C:\Users\zrdar\Documents\todo-app\public\js\auth\register.js ---


const API_URL = 'http://192.168.1.135:3000/api/auth/register'
const loginForm = document.getElementById('registerForm')
const name = document.getElementById('name')
const email = document.getElementById('email')
const password = document.getElementById('password')
import { redirectIfLoggedIn } from '../utils.js'

// Redirect user to dashboard if logged in
redirectIfLoggedIn()

registerForm.addEventListener('submit', async (event) => {
    event.preventDefault()
    try {
        let response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json;charset=utf-8'
            },
            body: JSON.stringify({ username: name.value, email: email.value, password: password.value })
        })
    
        const result = await response.json();
    
        console.log(result)
    } catch (error) {
        console.error('Error logging in:', error)
    }
})                                                                                                                                                              


# --- FILE: C:\Users\zrdar\Documents\todo-app\public\js\todo\fetchTodos.js ---


export async function fetchTodos(API_URL_TODO) {

}


# --- FILE: C:\Users\zrdar\Documents\todo-app\routes\authRoutes.js ---


const express = require('express')
const router = express.Router()
const { registerUser, loginUser, logoutUser } = require('../controllers/authController')

// Register route
router.post('/register', registerUser)

// Login route
router.post('/login', loginUser)

// Logout route
router.post('/logout', logoutUser)

module.exports = router


# --- FILE: C:\Users\zrdar\Documents\todo-app\routes\protectedRoutes.js ---


const express = require('express')
const router = express.Router()
const { authMiddleware } = require('../middleware/authMiddleware')
const { getCurrentUser } = require('../controllers/userController')

// Register route
router.get('/me', authMiddleware, getCurrentUser)

module.exports = router


# --- FILE: C:\Users\zrdar\Documents\todo-app\routes\todoRoutes.js ---


const express = require('express')
const router = express.Router()
const { getTodos, createTodo, getTodo, updateTodo, deleteTodo } = require('../controllers/todoController')
const { authMiddleware } = require('../middleware/authMiddleware')

// router.use(authMiddleware)
router.get('/', getTodos)
// router.post('/', createTodo)
// router.get('/:id', getTodo)
// router.put('/:id', updateTodo)
// router.delete('/:id', deleteTodo)

module.exports = router


# --- FILE: C:\Users\zrdar\Documents\todo-app\public\dashboard.html ---


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="styles/main.css">
</head>
<body>
    <h1>DASHBOARD</h1>
    <ul class="ulList">

    </ul>
    <button id="logOutButton">Log Out</button>
    <script type="module" src="js/main.js"></script>
</body>
</html>


# --- FILE: C:\Users\zrdar\Documents\todo-app\public\index.html ---


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="styles/main.css">
</head>
<body>
    <h1>INDEX</h1>
    <button type="submit" id="logOutButton">Log out</button>

</body>
</html>


# --- FILE: C:\Users\zrdar\Documents\todo-app\public\login.html ---


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="styles/main.css">
</head>
<body>
    <h1>Log in</h1>
    <form id="loginForm">
        <input type="email" id="email" placeholder="Email" required>
        <input type="password" id="password" placeholder="Password" required>
        <input type="submit" value="Submit">
    </form>

    <script type="module" src="/js/auth/login.js"></script>
</body>
</html>


# --- FILE: C:\Users\zrdar\Documents\todo-app\public\me.html ---


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="styles/main.css">
</head>
<body>
    <h1>ME</h1>
    <form id="getMe">
        <input type="submit" value="Get Me">
    </form>

    <script src="/js/auth/me.js"></script>
</body>
</html>


# --- FILE: C:\Users\zrdar\Documents\todo-app\public\register.html ---


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="styles/main.css">
</head>
<body>
    <h1>Register</h1>
    <form id="registerForm">
        <input type="name" id="name" placeholder="Name" required>
        <input type="email" id="email" placeholder="Email" required>
        <input type="password" id="password" placeholder="Password" required>
        <input type="submit" value="Submit">
    </form>

    <script type="module" src="/js/auth/register.js"></script>
</body>
</html>


# --- FILE: C:\Users\zrdar\Documents\todo-app\public\styles\main.css ---


